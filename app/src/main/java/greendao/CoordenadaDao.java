package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.Coordenada;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table COORDENADA.
*/
public class CoordenadaDao extends AbstractDao<Coordenada, Long> {

    public static final String TABLENAME = "COORDENADA";

    /**
     * Properties of entity Coordenada.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Latitud = new Property(1, Double.class, "latitud", false, "LATITUD");
        public final static Property Longitud = new Property(2, Double.class, "longitud", false, "LONGITUD");
        public final static Property Altitud = new Property(3, Integer.class, "altitud", false, "ALTITUD");
        public final static Property Id_ruta = new Property(4, Integer.class, "id_ruta", false, "ID_RUTA");
        public final static Property Posicion = new Property(5, Integer.class, "posicion", false, "POSICION");
    };


    public CoordenadaDao(DaoConfig config) {
        super(config);
    }
    
    public CoordenadaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'COORDENADA' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'LATITUD' REAL," + // 1: latitud
                "'LONGITUD' REAL," + // 2: longitud
                "'ALTITUD' INTEGER," + // 3: altitud
                "'ID_RUTA' INTEGER," + // 4: id_ruta
                "'POSICION' INTEGER);"); // 5: posicion
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'COORDENADA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Coordenada entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Double latitud = entity.getLatitud();
        if (latitud != null) {
            stmt.bindDouble(2, latitud);
        }
 
        Double longitud = entity.getLongitud();
        if (longitud != null) {
            stmt.bindDouble(3, longitud);
        }
 
        Integer altitud = entity.getAltitud();
        if (altitud != null) {
            stmt.bindLong(4, altitud);
        }
 
        Integer id_ruta = entity.getId_ruta();
        if (id_ruta != null) {
            stmt.bindLong(5, id_ruta);
        }
 
        Integer posicion = entity.getPosicion();
        if (posicion != null) {
            stmt.bindLong(6, posicion);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Coordenada readEntity(Cursor cursor, int offset) {
        Coordenada entity = new Coordenada( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1), // latitud
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // longitud
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // altitud
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // id_ruta
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5) // posicion
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Coordenada entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLatitud(cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1));
        entity.setLongitud(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setAltitud(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setId_ruta(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setPosicion(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Coordenada entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Coordenada entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
