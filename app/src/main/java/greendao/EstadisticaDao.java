package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.Estadistica;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ESTADISTICA.
*/
public class EstadisticaDao extends AbstractDao<Estadistica, Long> {

    public static final String TABLENAME = "ESTADISTICA";

    /**
     * Properties of entity Estadistica.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Tiempo_recorrido = new Property(1, String.class, "tiempo_recorrido", false, "TIEMPO_RECORRIDO");
        public final static Property Fecha = new Property(2, java.util.Date.class, "fecha", false, "FECHA");
        public final static Property Id_usuario = new Property(3, Integer.class, "id_usuario", false, "ID_USUARIO");
        public final static Property Id_ruta = new Property(4, Integer.class, "id_ruta", false, "ID_RUTA");
    };


    public EstadisticaDao(DaoConfig config) {
        super(config);
    }
    
    public EstadisticaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ESTADISTICA' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TIEMPO_RECORRIDO' TEXT," + // 1: tiempo_recorrido
                "'FECHA' INTEGER," + // 2: fecha
                "'ID_USUARIO' INTEGER," + // 3: id_usuario
                "'ID_RUTA' INTEGER);"); // 4: id_ruta
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ESTADISTICA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Estadistica entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String tiempo_recorrido = entity.getTiempo_recorrido();
        if (tiempo_recorrido != null) {
            stmt.bindString(2, tiempo_recorrido);
        }
 
        java.util.Date fecha = entity.getFecha();
        if (fecha != null) {
            stmt.bindLong(3, fecha.getTime());
        }
 
        Integer id_usuario = entity.getId_usuario();
        if (id_usuario != null) {
            stmt.bindLong(4, id_usuario);
        }
 
        Integer id_ruta = entity.getId_ruta();
        if (id_ruta != null) {
            stmt.bindLong(5, id_ruta);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Estadistica readEntity(Cursor cursor, int offset) {
        Estadistica entity = new Estadistica( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // tiempo_recorrido
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // fecha
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // id_usuario
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4) // id_ruta
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Estadistica entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTiempo_recorrido(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFecha(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setId_usuario(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setId_ruta(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Estadistica entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Estadistica entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
